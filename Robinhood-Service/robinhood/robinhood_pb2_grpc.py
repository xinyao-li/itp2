# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import robinhood_pb2 as robinhood__pb2


class RobinhoodServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.login = channel.unary_unary(
                '/robinhood.RobinhoodService/login',
                request_serializer=robinhood__pb2.LoginRequest.SerializeToString,
                response_deserializer=robinhood__pb2.LoginResponse.FromString,
                )
        self.logout = channel.unary_unary(
                '/robinhood.RobinhoodService/logout',
                request_serializer=robinhood__pb2.LogoutRequest.SerializeToString,
                response_deserializer=robinhood__pb2.LogoutResponse.FromString,
                )
        self.quote = channel.unary_unary(
                '/robinhood.RobinhoodService/quote',
                request_serializer=robinhood__pb2.QuoteRequest.SerializeToString,
                response_deserializer=robinhood__pb2.QuoteResponse.FromString,
                )
        self.buy = channel.unary_unary(
                '/robinhood.RobinhoodService/buy',
                request_serializer=robinhood__pb2.BuyRequest.SerializeToString,
                response_deserializer=robinhood__pb2.BuyResponse.FromString,
                )
        self.sell = channel.unary_unary(
                '/robinhood.RobinhoodService/sell',
                request_serializer=robinhood__pb2.SellRequest.SerializeToString,
                response_deserializer=robinhood__pb2.SellResponse.FromString,
                )
        self.getBalance = channel.unary_unary(
                '/robinhood.RobinhoodService/getBalance',
                request_serializer=robinhood__pb2.BalanceRequest.SerializeToString,
                response_deserializer=robinhood__pb2.BalanceResponse.FromString,
                )
        self.autoBuy = channel.unary_unary(
                '/robinhood.RobinhoodService/autoBuy',
                request_serializer=robinhood__pb2.AutoBuyRequest.SerializeToString,
                response_deserializer=robinhood__pb2.AutoBuyResponse.FromString,
                )
        self.autoSell = channel.unary_unary(
                '/robinhood.RobinhoodService/autoSell',
                request_serializer=robinhood__pb2.AutoSellRequest.SerializeToString,
                response_deserializer=robinhood__pb2.AutoSellResponse.FromString,
                )


class RobinhoodServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def quote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sell(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def autoBuy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def autoSell(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RobinhoodServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=robinhood__pb2.LoginRequest.FromString,
                    response_serializer=robinhood__pb2.LoginResponse.SerializeToString,
            ),
            'logout': grpc.unary_unary_rpc_method_handler(
                    servicer.logout,
                    request_deserializer=robinhood__pb2.LogoutRequest.FromString,
                    response_serializer=robinhood__pb2.LogoutResponse.SerializeToString,
            ),
            'quote': grpc.unary_unary_rpc_method_handler(
                    servicer.quote,
                    request_deserializer=robinhood__pb2.QuoteRequest.FromString,
                    response_serializer=robinhood__pb2.QuoteResponse.SerializeToString,
            ),
            'buy': grpc.unary_unary_rpc_method_handler(
                    servicer.buy,
                    request_deserializer=robinhood__pb2.BuyRequest.FromString,
                    response_serializer=robinhood__pb2.BuyResponse.SerializeToString,
            ),
            'sell': grpc.unary_unary_rpc_method_handler(
                    servicer.sell,
                    request_deserializer=robinhood__pb2.SellRequest.FromString,
                    response_serializer=robinhood__pb2.SellResponse.SerializeToString,
            ),
            'getBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.getBalance,
                    request_deserializer=robinhood__pb2.BalanceRequest.FromString,
                    response_serializer=robinhood__pb2.BalanceResponse.SerializeToString,
            ),
            'autoBuy': grpc.unary_unary_rpc_method_handler(
                    servicer.autoBuy,
                    request_deserializer=robinhood__pb2.AutoBuyRequest.FromString,
                    response_serializer=robinhood__pb2.AutoBuyResponse.SerializeToString,
            ),
            'autoSell': grpc.unary_unary_rpc_method_handler(
                    servicer.autoSell,
                    request_deserializer=robinhood__pb2.AutoSellRequest.FromString,
                    response_serializer=robinhood__pb2.AutoSellResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'robinhood.RobinhoodService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RobinhoodService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/login',
            robinhood__pb2.LoginRequest.SerializeToString,
            robinhood__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/logout',
            robinhood__pb2.LogoutRequest.SerializeToString,
            robinhood__pb2.LogoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def quote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/quote',
            robinhood__pb2.QuoteRequest.SerializeToString,
            robinhood__pb2.QuoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/buy',
            robinhood__pb2.BuyRequest.SerializeToString,
            robinhood__pb2.BuyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/sell',
            robinhood__pb2.SellRequest.SerializeToString,
            robinhood__pb2.SellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/getBalance',
            robinhood__pb2.BalanceRequest.SerializeToString,
            robinhood__pb2.BalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def autoBuy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/autoBuy',
            robinhood__pb2.AutoBuyRequest.SerializeToString,
            robinhood__pb2.AutoBuyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def autoSell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/autoSell',
            robinhood__pb2.AutoSellRequest.SerializeToString,
            robinhood__pb2.AutoSellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
