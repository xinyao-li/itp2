# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import robinhood_pb2 as robinhood__pb2


class RobinhoodServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LOGIN = channel.unary_unary(
                '/robinhood.RobinhoodService/LOGIN',
                request_serializer=robinhood__pb2.LoginRequest.SerializeToString,
                response_deserializer=robinhood__pb2.LoginResponse.FromString,
                )
        self.QUOTE = channel.unary_unary(
                '/robinhood.RobinhoodService/QUOTE',
                request_serializer=robinhood__pb2.QuoteRequest.SerializeToString,
                response_deserializer=robinhood__pb2.QuoteResponse.FromString,
                )
        self.BUY = channel.unary_unary(
                '/robinhood.RobinhoodService/BUY',
                request_serializer=robinhood__pb2.BuyRequest.SerializeToString,
                response_deserializer=robinhood__pb2.BuyResponse.FromString,
                )
        self.SELL = channel.unary_unary(
                '/robinhood.RobinhoodService/SELL',
                request_serializer=robinhood__pb2.SellRequest.SerializeToString,
                response_deserializer=robinhood__pb2.SellResponse.FromString,
                )
        self.ApiTest = channel.unary_unary(
                '/robinhood.RobinhoodService/ApiTest',
                request_serializer=robinhood__pb2.ApiTestRequest.SerializeToString,
                response_deserializer=robinhood__pb2.ApiTestResponse.FromString,
                )


class RobinhoodServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LOGIN(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QUOTE(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BUY(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SELL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApiTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RobinhoodServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LOGIN': grpc.unary_unary_rpc_method_handler(
                    servicer.LOGIN,
                    request_deserializer=robinhood__pb2.LoginRequest.FromString,
                    response_serializer=robinhood__pb2.LoginResponse.SerializeToString,
            ),
            'QUOTE': grpc.unary_unary_rpc_method_handler(
                    servicer.QUOTE,
                    request_deserializer=robinhood__pb2.QuoteRequest.FromString,
                    response_serializer=robinhood__pb2.QuoteResponse.SerializeToString,
            ),
            'BUY': grpc.unary_unary_rpc_method_handler(
                    servicer.BUY,
                    request_deserializer=robinhood__pb2.BuyRequest.FromString,
                    response_serializer=robinhood__pb2.BuyResponse.SerializeToString,
            ),
            'SELL': grpc.unary_unary_rpc_method_handler(
                    servicer.SELL,
                    request_deserializer=robinhood__pb2.SellRequest.FromString,
                    response_serializer=robinhood__pb2.SellResponse.SerializeToString,
            ),
            'ApiTest': grpc.unary_unary_rpc_method_handler(
                    servicer.ApiTest,
                    request_deserializer=robinhood__pb2.ApiTestRequest.FromString,
                    response_serializer=robinhood__pb2.ApiTestResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'robinhood.RobinhoodService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RobinhoodService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LOGIN(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/LOGIN',
            robinhood__pb2.LoginRequest.SerializeToString,
            robinhood__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QUOTE(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/QUOTE',
            robinhood__pb2.QuoteRequest.SerializeToString,
            robinhood__pb2.QuoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BUY(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/BUY',
            robinhood__pb2.BuyRequest.SerializeToString,
            robinhood__pb2.BuyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SELL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/SELL',
            robinhood__pb2.SellRequest.SerializeToString,
            robinhood__pb2.SellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApiTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/robinhood.RobinhoodService/ApiTest',
            robinhood__pb2.ApiTestRequest.SerializeToString,
            robinhood__pb2.ApiTestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
